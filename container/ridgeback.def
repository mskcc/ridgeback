Bootstrap: docker
From: ubuntu:18.04
Includecmd: no

%post
    export DEBIAN_FRONTEND=noninteractive \
    && apt-get clean && apt-get update -qq \
    && apt-get -y install \
        python python-pip python-dev python3 python3-pip python3-virtualenv wget \
        libldap2-dev libsasl2-dev libssl-dev \
        postgresql postgresql-contrib libpq-dev \
        gawk build-essential nodejs \
        git \
        default-jdk

    if [ -z "$RIDGEBACK_BRANCH" ]; then
    export RIDGEBACK_BRANCH=master
    fi

    cd /usr/bin \
    && git clone https://github.com/mskcc/ridgeback --branch $RIDGEBACK_BRANCH
    cd /usr/bin/ridgeback \
    && python3 -m pip install python-ldap \
    && pip3 install -r requirements.txt


##############################
# run ridgeback service
##############################

%apprun ridgeback-start

    if [ -z "$RIDGEBACK_PATH" ]; then
        echo "ERROR: SINGULARITYENV_RIDGEBACK_PATH is not set."
        exit 1
    fi

    if [ -z "$RIDGEBACK_PORT" ]; then
        echo "ERROR: SINGULARITYENV_RIDGEBACK_PORT is not set."
        exit 1
    fi

    nohup python3 ${RIDGEBACK_PATH}/manage.py migrate
    nohup python3 ${RIDGEBACK_PATH}/manage.py collectstatic
    nohup python3 ${RIDGEBACK_PATH}/manage.py runserver 0.0.0.0:$RIDGEBACK_PORT

##############################
# start celery
##############################

%apprun celery-start

    if [ -z "$RIDGEBACK_VENV" ]; then
        echo "ERROR environment variable SINGULARITYENV_RIDGEBACK_VENV is not defined, Toil will not work"
        exit 1
    fi

    if [ -z "$SINGULARITY_PATH" ]; then
        echo "ERROR environment variable SINGULARITYENV_SINGULARITY_PATH is not defined, Singularity will not work"
        exit 1
    fi

    if [ -z "$RIDGEBACK_PATH" ]; then
        echo "ERROR: SINGULARITYENV_RIDGEBACK_PATH is not set."
        exit 1
    fi

    if [ -z "RIDGEBACK_TOIL" ]; then
        echo "ERROR environment variable SINGULARITYENV_RIDGEBACK_TOIL is not defined, Toil on LSF will not work"
        exit 1
    fi

    if [ -z "${CELERY_LOG_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_LOG_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_PID_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_PID_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_BEAT_SCHEDULE_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_BEAT_SCHEDULE_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_EVENT_QUEUE_PREFIX}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_EVENT_QUEUE_PREFIX not set."
        exit 1
    fi

    if [ -z "$LSF_LIBDIR" ]; then
        echo "ERROR environment variable LSF_LIBDIR is not defined, LSF will not work"
        exit 1
    fi

    if [ -z "$LSF_SERVERDIR" ]; then
        echo "ERROR environment variable LSF_SERVERDIR is not defined, LSF will not work"
        exit 1
    fi

    if [ -z "$LSF_ENVDIR" ]; then
        echo "ERROR environment variable LSF_ENVDIR is not defined, LSF will not work"
        exit 1
    fi

    if [ -z "$LSF_BINDIR" ]; then
        echo "ERROR environment variable LSF_BINDIR is not defined, LSF will not work"
        exit 1
    fi

    if [ ! -d "$LSF_LIBDIR" ]; then
        echo "ERROR $LSF_LIBDIR is not mounted or does not exist"
        exit 1
    fi

    if [ ! -d "$LSF_SERVERDIR" ]; then
        echo "ERROR $LSF_SERVERDIR is not mounted or does not exist"
        exit 1
    fi

    if [ ! -d "$LSF_ENVDIR" ]; then
        echo "ERROR $LSF_ENVDIR is not mounted or does not exist"
        exit 1
    fi

    if [ ! -d "$LSF_BINDIR" ]; then
        echo "ERROR $LSF_BINDIR is not mounted or does not exist"
        exit 1
    fi

    export RIDGEBACK_VENV_ACTIVATE=`python3 -c "import os; print(os.path.join('$RIDGEBACK_VENV','bin/activate'))"`
    export SINGULARITY_BIN_PATH=`python3 -c "import os; print(os.path.dirname('$SINGULARITY_PATH'))"`

    . $RIDGEBACK_VENV_ACTIVATE
    export PATH=$LSF_BINDIR:$SINGULARITY_BIN_PATH:$PATH

    nohup celery -A orchestrator beat \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -f ${CELERY_LOG_PATH}/ridgeback_beat.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.ridgeback_beat.pid \
    -s ${CELERY_BEAT_SCHEDULE_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.celerybeat-schedule >/dev/null 2>&1 < /dev/null &

    nohup celery -A orchestrator worker \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -Q ${RIDGEBACK_SUBMIT_JOB_LSF_QUEUE} \
    -f ${CELERY_LOG_PATH}/${RIDGEBACK_SUBMIT_JOB_LSF_QUEUE}.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.${RIDGEBACK_SUBMIT_JOB_LSF_QUEUE}.pid \
    --concurrency=10 \
    -n ${CELERY_EVENT_QUEUE_PREFIX}.${RIDGEBACK_SUBMIT_JOB_LSF_QUEUE} >/dev/null 2>&1 < /dev/null &

    nohup celery -A orchestrator worker \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -Q ${RIDGEBACK_ACTION_QUEUE} \
    -f ${CELERY_LOG_PATH}/${RIDGEBACK_ACTION_QUEUE}.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.${RIDGEBACK_ACTION_QUEUE}.pid \
    --concurrency=10 \
    -n ${CELERY_EVENT_QUEUE_PREFIX}.${RIDGEBACK_ACTION_QUEUE} >/dev/null 2>&1 < /dev/null &

    nohup celery -A orchestrator worker \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -Q ${RIDGEBACK_CHECK_STATUS_QUEUE} \
    -f ${CELERY_LOG_PATH}/${RIDGEBACK_CHECK_STATUS_QUEUE}.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.${RIDGEBACK_CHECK_STATUS_QUEUE}.pid \
    --concurrency=1 >/dev/null 2>&1 < /dev/null &

    nohup celery -A orchestrator worker \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -Q ${RIDGEBACK_SUBMIT_JOB_QUEUE} \
    -f ${CELERY_LOG_PATH}/${RIDGEBACK_SUBMIT_JOB_QUEUE}.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.${RIDGEBACK_SUBMIT_JOB_QUEUE}.pid \
    --concurrency=1 >/dev/null 2>&1 < /dev/null &

    nohup celery -A orchestrator worker \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -Q ${RIDGEBACK_CLEANUP_QUEUE} \
    -f ${CELERY_LOG_PATH}/${RIDGEBACK_CLEANUP_QUEUE}.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.${RIDGEBACK_CLEANUP_QUEUE}.pid \
    --concurrency=2 >/dev/null 2>&1 < /dev/null &


##############################
# stop celery
##############################

%apprun celery-stop
    if [ -z "${RIDGEBACK_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_RIDGEBACK_PATH not set."
        exit 1
    fi

    if [ -z "${CELERY_LOG_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_LOG_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_PID_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_PID_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_BEAT_SCHEDULE_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_BEAT_SCHEDULE_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_EVENT_QUEUE_PREFIX}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_EVENT_QUEUE_PREFIX not set."
        exit 1
    fi

    export CELERY_BEAT_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_beat.pid
    export CELERY_WORKER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_worker.pid
    export CELERY_SCHEDULER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_scheduler.pid
    export CELERY_RUNNER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_runner.pid
    export CELERY_FLOWER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_flower.pid

    echo "Killing celery services with the following settings:"
    echo "RIDGEBACK_PATH:"$RIDGEBACK_PATH
    echo "CELERY_LOG_PATH:"$CELERY_LOG_PATH
    echo "CELERY_PID_PATH:"$CELERY_PID_PATH
    echo "CELERY_BEAT_SCHEDULE_PATH:"$CELERY_BEAT_SCHEDULE_PATH
    echo "CELERY_EVENT_QUEUE_PREFIX:"$CELERY_EVENT_QUEUE_PREFIX
    echo "CELERY_BEAT_PID_FILE:"$CELERY_BEAT_PID_FILE
    echo "CELERY_WORKER_PID_FILE:"$CELERY_WORKER_PID_FILE
    echo "CELERY_SCHEDULER_PID_FILE:"$CELERY_SCHEDULER_PID_FILE
    echo "CELERY_RUNNER_PID_FILE:"$CELERY_RUNNER_PID_FILE
    echo "CELERY_FLOWER_PID_FILE:"$CELERY_FLOWER_PID_FILE

    ps auxww | grep 'celery' | grep $CELERY_BEAT_PID_FILE | grep -v 'grep' | awk '{print $2}' | xargs kill -9
    ps auxww | grep 'celery' | grep $CELERY_WORKER_PID_FILE | grep -v 'grep' | awk '{print $2}' | xargs kill -9
    ps auxww | grep 'celery' | grep $CELERY_SCHEDULER_PID_FILE | grep -v 'grep' | awk '{print $2}' | xargs kill -9
    ps auxww | grep 'celery' | grep $CELERY_RUNNER_PID_FILE | grep -v 'grep' | awk '{print $2}' | xargs kill -9
    ps auxww | grep 'celery' | grep $CELERY_FLOWER_PID_FILE | grep -v 'grep' | awk '{print $2}' | xargs kill -9

############################################################
# check env variables with celery-env, beagle-env 
# 
# view how many processes are running for each celery worker
############################################################

%apprun celery-env
    if [ -z "${RIDGEBACK_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_RIDGEBACK_PATH not set."
        exit 1
    fi

    if [ -z "${CELERY_LOG_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_LOG_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_PID_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_PID_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    if [ -z "${CELERY_BEAT_SCHEDULE_PATH}" ]; then
        echo "ERROR: SINGULARITYENV_CELERY_BEAT_SCHEDULE_PATH not set; suggest setting to default /tmp, accessible by container."
        exit 1
    fi

    export CELERY_BEAT_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_beat.pid
    export CELERY_WORKER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_worker.pid
    export CELERY_SCHEDULER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_scheduler.pid
    export CELERY_RUNNER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_runner.pid
    export CELERY_FLOWER_PID_FILE=${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.beagle_flower.pid

    echo "Current celery settings:"
    echo "RIDGEBACK_PATH:"$RIDGEBACK_PATH
    echo "CELERY_LOG_PATH:"$CELERY_LOG_PATH
    echo "CELERY_PID_PATH:"$CELERY_PID_PATH
    echo "CELERY_BEAT_SCHEDULE_PATH:"$CELERY_BEAT_SCHEDULE_PATH
    echo "CELERY_EVENT_QUEUE_PREFIX:"$CELERY_EVENT_QUEUE_PREFIX
    echo "CELERY_BEAT_PID_FILE:"$CELERY_BEAT_PID_FILE
    echo "CELERY_WORKER_PID_FILE:"$CELERY_WORKER_PID_FILE
    echo "CELERY_SCHEDULER_PID_FILE:"$CELERY_SCHEDULER_PID_FILE
    echo "CELERY_RUNNER_PID_FILE:"$CELERY_RUNNER_PID_FILE
    echo "CELERY_FLOWER_PID_FILE:"$CELERY_FLOWER_PID_FILE
    echo ""

    export CELERY_BEAT=`ps auxww | grep 'celery' | grep $CELERY_BEAT_PID_FILE | grep -v 'grep' | awk '{print $2}' | wc -l`
    export CELERY_WORKER=`ps auxww | grep 'celery' | grep $CELERY_WORKER_PID_FILE | grep -v 'grep' | awk '{print $2}' | wc -l`
    export CELERY_SCHEDULER=`ps auxww | grep 'celery' | grep $CELERY_SCHEDULER_PID_FILE | grep -v 'grep' | awk '{print $2}' | wc -l`
    export CELERY_RUNNER=`ps auxww | grep 'celery' | grep $CELERY_RUNNER_PID_FILE | grep -v 'grep' | awk '{print $2}' | wc -l`
    export CELERY_FLOWER=`ps auxww | grep 'celery' | grep $CELERY_FLOWER_PID_FILE | grep -v 'grep' | awk '{print $2}' | wc -l`

    echo "Number of celery processes currently running for $CELERY_EVENT_QUEUE_PREFIX:"
    echo "Beat - $CELERY_BEAT"
    echo "Worker - $CELERY_WORKER"
    echo "Scheduler - $CELERY_SCHEDULER"
    echo "Runner - $CELERY_RUNNER"
    echo "Flower - $CELERY_FLOWER"


