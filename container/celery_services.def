Bootstrap: docker
From: ubuntu:19.10
Includecmd: no

%startscript

    if [ -z "$RIDGEBACK_VENV" ]; then
    echo "ERROR environment variable RIDGEBACK_VENV is not defined, Toil will not work"
    fi

    if [ -z "$SINGULARITY_PATH" ]; then
    echo "ERROR environment variable SINGULARITY_PATH is not defined, Singularity will not work"
    fi

    if [ -z "$RIDGEBACK_PATH" ]; then
    export RIDGEBACK_PATH=/usr/bin/ridgeback
    fi

    if [ -z "RIDGEBACK_TOIL" ]; then
    export RIDGEBACK_TOIL=`python3 -c "import os; print(os.path.join('$RIDGEBACK_VENV','bin/cwltoil'))"`
    fi

    if [ -z "$CELERY_LOG_PATH" ]; then
    export CELERY_LOG_PATH=/tmp
    fi

    if [ -z "$CELERY_PID_PATH" ]; then
    export CELERY_PID_PATH=/tmp
    fi

    if [ -z "$CELERY_BEAT_SCHEDULE_PATH" ]; then
    export CELERY_BEAT_SCHEDULE_PATH=/tmp
    fi

    if [ -z "$CELERY_EVENT_QUEUE_PREFIX" ]; then
    export CELERY_EVENT_QUEUE_PREFIX=$(date +%Y%m%dT%H%M%S)
    fi

    if [ -z "$LSF_LIBDIR" ]; then
    echo "ERROR environment variable LSF_LIBDIR is not defined, LSF will not work"
    fi

    if [ -z "$LSF_SERVERDIR" ]; then
    echo "ERROR environment variable LSF_SERVERDIR is not defined, LSF will not work"
    fi

    if [ -z "$LSF_ENVDIR" ]; then
    echo "ERROR environment variable LSF_ENVDIR is not defined, LSF will not work"
    fi

    if [ -z "$LSF_BINDIR" ]; then
    echo "ERROR environment variable LSF_BINDIR is not defined, LSF will not work"
    fi

    if [ ! -d "$LSF_LIBDIR" ]; then
    echo "ERROR $LSF_LIBDIR is not mounted or does not exist"
    fi

    if [ ! -d "$LSF_SERVERDIR" ]; then
    echo "ERROR $LSF_SERVERDIR is not mounted or does not exist"
    fi

    if [ ! -d "$LSF_ENVDIR" ]; then
    echo "ERROR $LSF_ENVDIR is not mounted or does not exist"
    fi

    if [ ! -d "$LSF_BINDIR" ]; then
    echo "ERROR $LSF_BINDIR is not mounted or does not exist"
    fi

    export RIDGEBACK_VENV_ACTIVATE=`python3 -c "import os; print(os.path.join('$RIDGEBACK_VENV','bin/activate'))"`
    export SINGULARITY_BIN_PATH=`python3 -c "import os; print(os.path.dirname('$SINGULARITY_PATH'))"`

    . $RIDGEBACK_VENV_ACTIVATE
    export PATH=$LSF_BINDIR:$SINGULARITY_BIN_PATH:$PATH

    nohup celery -A toil_orchestrator beat \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -f ${CELERY_LOG_PATH}/ridgeback_beat.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.ridgeback_beat.pid \
    -s ${CELERY_BEAT_SCHEDULE_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.celerybeat-schedule &

    nohup celery -A toil_orchestrator worker \
    -l info \
    --workdir ${RIDGEBACK_PATH} \
    -Q ${RIDGEBACK_DEFAULT_QUEUE} \
    -f ${CELERY_LOG_PATH}/ridgeback_worker.log \
    --pidfile ${CELERY_PID_PATH}/${CELERY_EVENT_QUEUE_PREFIX}.ridgeback_worker.pid \
    -n ${CELERY_EVENT_QUEUE_PREFIX}.ridgeback_worker


%post
    export DEBIAN_FRONTEND=noninteractive \
    && apt-get clean && apt-get update -qq \
    && apt-get -y install \
        python python-pip python-dev python3 python3-pip python3-virtualenv wget \
        libldap2-dev libsasl2-dev libssl-dev \
        postgresql postgresql-contrib libpq-dev \
        gawk build-essential nodejs \
        git

    if [ -z "$RIDGEBACK_BRANCH" ]; then
    export RIDGEBACK_BRANCH=master
    fi

    if [ -z "$TOIL_REPO" ]; then
    export TOIL_REPO=dataBiosphere
    fi

    if [ -z "$TOIL_BRANCH" ]; then
    export TOIL_BRANCH=releases/3.21.0
    fi

    cd /usr/bin \
    && git clone https://github.com/mskcc/ridgeback --branch $RIDGEBACK_BRANCH
    cd /usr/bin/ridgeback \
    && python3 -m virtualenv --python=/usr/bin/python3 /opt/venv \
    && . /opt/venv/bin/activate \
    && python3 -m pip install python-ldap \
    && pip3 install -r requirements.txt \
    && cd /opt/ \
    && git clone https://github.com/$TOIL_REPO/toil --branch $TOIL_BRANCH \
    && cd toil \
    && make prepare \
    && make develop extras=[cwl] \
    && chmod 777 /opt/toil/src/toil/version.py